#!/usr/bin/env python3
"""
Rob√¥ de Navega√ß√£o Web Autom√°tica - Com Navegador Real
Desenvolvido para Kali Linux

Funcionalidades:
- Abre navegador Firefox
- Acessa saude.grupoaronseg.com.br
- Permanece 20 segundos no site
- Fecha navegador
- Repete o ciclo infinitamente
- Loop infinito at√© interrup√ß√£o (Ctrl+C)
"""

import time
import logging
import signal
import sys
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import subprocess
import os

class WebRobotBrowser:
    def __init__(self):
        self.driver = None
        self.site = "https://saude.grupoaronseg.com.br"
        self.cycle_count = 0
        self.setup_logging()
        self.setup_signal_handler()

    def setup_logging(self):
        """Configura o sistema de logs"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - [ROB√î] - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        self.logger = logging.getLogger(__name__)

    def setup_signal_handler(self):
        """Configura handler para interrup√ß√£o graceful com Ctrl+C"""
        signal.signal(signal.SIGINT, self.signal_handler)

    def signal_handler(self, sig, frame):
        """Handler para parada graceful"""
        self.logger.info("üõë INTERRUP√á√ÉO RECEBIDA - Parando rob√¥...")
        self.logger.info(f"üìä TOTAL DE CICLOS EXECUTADOS: {self.cycle_count}")
        if self.driver:
            try:
                self.driver.quit()
                self.logger.info("‚úÖ NAVEGADOR FECHADO COM SUCESSO")
            except:
                self.logger.warning("‚ö†Ô∏è  Erro ao fechar navegador")
        sys.exit(0)

    def setup_driver(self):
        """Configura o driver do Firefox em modo headless"""
        try:
            # Primeiro tenta com webdriver-manager
            try:
                from webdriver_manager.firefox import GeckoDriverManager
                
                firefox_options = FirefoxOptions()
                firefox_options.add_argument("--headless")  # Modo sem interface gr√°fica
                firefox_options.add_argument("--width=1920")
                firefox_options.add_argument("--height=1080")
                
                service = Service(GeckoDriverManager().install())
                self.driver = webdriver.Firefox(service=service, options=firefox_options)
                self.driver.set_page_load_timeout(30)
                self.logger.info("‚úÖ FIREFOX CONFIGURADO COM WEBDRIVER-MANAGER (Modo Headless)")
                return True
                
            except Exception as manager_error:
                self.logger.warning(f"‚ö†Ô∏è  WebDriver Manager falhou: {manager_error}")
                
                # Fallback para geckodriver local
                try:
                    firefox_options = FirefoxOptions()
                    firefox_options.add_argument("--headless")
                    firefox_options.add_argument("--width=1920")
                    firefox_options.add_argument("--height=1080")
                    
                    self.driver = webdriver.Firefox(options=firefox_options)
                    self.driver.set_page_load_timeout(30)
                    self.logger.info("‚úÖ FIREFOX CONFIGURADO COM GECKODRIVER LOCAL (Modo Headless)")
                    return True
                    
                except Exception as local_error:
                    self.logger.error(f"‚ùå Firefox local tamb√©m falhou: {local_error}")
                    
                    # √öltimo recurso: modo vis√≠vel (n√£o headless)
                    try:
                        self.driver = webdriver.Firefox()
                        self.driver.set_page_load_timeout(30)
                        self.logger.info("‚úÖ FIREFOX CONFIGURADO EM MODO VIS√çVEL")
                        return True
                        
                    except Exception as final_error:
                        self.logger.error(f"‚ùå Todas as tentativas falharam: {final_error}")
                        return False
            
        except Exception as e:
            self.logger.error(f"‚ùå ERRO CR√çTICO AO CONFIGURAR NAVEGADOR: {e}")
            return False

    def visit_site(self):
        """Visita o site e permanece por 20 segundos"""
        try:
            self.logger.info(f"üåê DIGITANDO URL NO NAVEGADOR: {self.site}")
            start_time = time.time()
            
            # Navega para o site (simula digitar a URL)
            self.driver.get(self.site)
            
            # Aguarda p√°gina carregar
            WebDriverWait(self.driver, 10).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            load_time = time.time() - start_time
            self.logger.info(f"‚úÖ SUCESSO! P√°gina carregada em {load_time:.2f} segundos")
            
            # Obt√©m informa√ß√µes da p√°gina
            try:
                title = self.driver.title
                current_url = self.driver.current_url
                self.logger.info(f"üìÑ T√çTULO DA P√ÅGINA: {title}")
                self.logger.info(f"üîó URL ATUAL: {current_url}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro ao obter info da p√°gina: {e}")
            
            # Permanece no site por 20 segundos
            self.logger.info("‚è∞ PERMANECENDO NO SITE POR 20 SEGUNDOS...")
            for i in range(20, 0, -1):
                self.logger.info(f"‚è∞ {i} segundos restantes...")
                time.sleep(1)
            
            self.logger.info("‚úÖ TEMPO COMPLETADO - 20 segundos no site")
            return True
            
        except TimeoutException:
            self.logger.error(f"‚è∞ TIMEOUT: Site {self.site} demorou muito para carregar")
            return False
        except WebDriverException as e:
            self.logger.error(f"‚ùå ERRO DE NAVEGA√á√ÉO: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå ERRO INESPERADO: {e}")
            return False

    def close_browser(self):
        """Fecha o navegador completamente"""
        try:
            if self.driver:
                self.driver.quit()
                self.logger.info("‚úÖ NAVEGADOR FECHADO")
                self.driver = None
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ERRO AO FECHAR NAVEGADOR: {e}")
            return False

    def run_cycle(self):
        """Executa um ciclo completo"""
        self.cycle_count += 1
        self.logger.info("=" * 60)
        self.logger.info(f"üîÑ INICIANDO CICLO #{self.cycle_count}")
        self.logger.info("=" * 60)
        
        # Abre navegador
        if not self.setup_driver():
            self.logger.error("‚ùå N√£o foi poss√≠vel abrir o navegador")
            return False
        
        # Visita o site
        success = self.visit_site()
        
        # Fecha navegador
        self.close_browser()
        
        if success:
            self.logger.info(f"‚úÖ CICLO #{self.cycle_count} COMPLETADO COM SUCESSO!")
        else:
            self.logger.warning(f"‚ö†Ô∏è  CICLO #{self.cycle_count} completado com erros")
        
        self.logger.info("‚è∏Ô∏è  Pausa de 3 segundos antes do pr√≥ximo ciclo...")
        time.sleep(3)
        
        return success

    def run(self):
        """Executa o rob√¥ em loop infinito"""
        self.logger.info("ü§ñ ROB√î DE NAVEGA√á√ÉO WEB COM NAVEGADOR REAL")
        self.logger.info("=" * 60)
        self.logger.info("üéØ SITE ALVO: saude.grupoaronseg.com.br")
        self.logger.info("‚è±Ô∏è  TEMPO NO SITE: 20 segundos")
        self.logger.info("üîÅ MODO: Loop infinito (Ctrl+C para parar)")
        self.logger.info("üåê NAVEGADOR: Firefox (abre e fecha a cada ciclo)")
        self.logger.info("=" * 60)

        try:
            while True:
                self.run_cycle()
                
        except KeyboardInterrupt:
            self.logger.info("üõë INTERRUP√á√ÉO MANUAL RECEBIDA")
        except Exception as e:
            self.logger.error(f"‚ùå ERRO CR√çTICO: {e}")
        finally:
            self.close_browser()
            self.logger.info(f"üìä ROB√î FINALIZADO - Total de ciclos: {self.cycle_count}")

def main():
    """Fun√ß√£o principal"""
    robot = WebRobotBrowser()
    robot.run()

if __name__ == "__main__":
    main()